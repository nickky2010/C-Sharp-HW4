//  Если в квадратной матрице A сумма элементов столбцов, состоящих из положительных элементов, 
//  больше чем такая же сумма в квадратной матрице В, 
//  заменить все нулевые элементы матрицы В на значение суммы элементов диагоналей этой матрицы.
//  В противном случае определить сумму элементов диагоналей матрицы А.
//  При создании объектов класса матрицы-аргументы конструктора создавать с использованием синтаксиса инициализаторов.С клавиатуры не вводить.
//  Для решения задачи создать класс Matrix, содержащий
//      	закрытое поле-массив для хранения данных,
//      	конструктор без параметров для создания единичной матрицы 3×3,
//      	конструктор с параметрами (параметр – матрица целых чисел),
//      	метод ToString(), возвращающий строковое представление матрицы,
//      	индексатор для доступа к элементам поля-массива, 
//      	метод GetLenth – аналог одноименного метода из Array,
//      	закрытый(private) метод, возвращающий true, если столбец состоит из положительных элементов(параметр – номер столбца),
//      	метод, возвращающий сумму элементов столбцов, состоящих из положительных элементов,
//      	свойство, возвращающее сумму элементов диагоналей матрицы.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HW4
{
    class Program
    {
        static void Main(string[] args)
        {
            Random r = new Random();
            Matrix A = new Matrix(new int[5, 5]{
                {r.Next(-2,2), r.Next(-1,2), r.Next(-2,2), r.Next(-1,2),r.Next(-2,2) },
                {r.Next(-2,2), r.Next(-1,2), r.Next(-2,2), r.Next(-1,2),r.Next(-2,2) },
                {r.Next(-2,2), r.Next(-1,2), r.Next(-2,2), r.Next(-1,2),r.Next(-2,2) },
                {r.Next(-2,2), r.Next(-1,2), r.Next(-2,2), r.Next(-1,2),r.Next(-2,2) },
                {r.Next(-2,2), r.Next(-1,2), r.Next(-2,2), r.Next(-1,2),r.Next(-2,2) }});
            Matrix B = new Matrix(new int[5, 5]{
                {r.Next(-2,2), r.Next(-2,2), r.Next(-2,2), r.Next(-2,2),r.Next(-2,2) },
                {r.Next(-2,2), r.Next(-2,2), r.Next(-2,2), r.Next(-2,2),r.Next(-2,2) },
                {r.Next(-2,2), r.Next(-2,2), r.Next(-2,2), r.Next(-2,2),r.Next(-2,2) },
                {r.Next(-2,2), r.Next(-2,2), r.Next(-2,2), r.Next(-2,2),r.Next(-2,2) },
                {r.Next(-2,2), r.Next(-2,2), r.Next(-2,2), r.Next(-2,2),r.Next(-2,2) }});
            Console.WriteLine("Матрица А");
            Console.WriteLine(A);
            Console.WriteLine("Матрица B");
            Console.WriteLine(B);
            //  Если в квадратной матрице A сумма элементов столбцов, состоящих из положительных элементов, 
            //  больше чем такая же сумма в квадратной матрице В, 
            //  заменить все нулевые элементы матрицы В на значение суммы элементов диагоналей этой матрицы.
            //Console.WriteLine("Cумма элементов столбцов, состоящих из положительных элементов матрицы А равна: " + A.SumColPositiv());
            //Console.WriteLine("Cумма элементов столбцов, состоящих из положительных элементов матрицы B равна: " + B.SumColPositiv());
            if (A.SumColPositiv()>B.SumColPositiv())
            {
                int sumDiagonal = B.SumDiagonal();
                for (int i = 0; i < B.GetLength(0); i++)
                {
                    for (int j = 0; j < B.GetLength(1); j++)
                    {
                        if (B[i, j] == 0)
                            B[i, j] = sumDiagonal;
                    }
                }
                Console.WriteLine("Заменяем все нулевые элементы матрицы В на значение суммы элементов диагоналей этой матрицы");
                Console.WriteLine("Матрица B");
                Console.WriteLine(B);
            }
            //  В противном случае определить сумму элементов диагоналей матрицы А
            else
            {
                Console.WriteLine("Сумма элементов диагоналей матрицы А равна: "+A.SumDiagonal());
            }
            Console.ReadKey();
        }
    }
}
